// vite.config.ts
import { crx } from 'file:///C:/Users/shibao/Documents/UMDev/zz_InfrequentTasks/tools/um-salesforce-vivache/node_modules/@crxjs/vite-plugin/dist/index.mjs';
import react from 'file:///C:/Users/shibao/Documents/UMDev/zz_InfrequentTasks/tools/um-salesforce-vivache/node_modules/@vitejs/plugin-react/dist/index.mjs';
import { resolve } from 'path';
import { defineConfig } from 'file:///C:/Users/shibao/Documents/UMDev/zz_InfrequentTasks/tools/um-salesforce-vivache/node_modules/vite/dist/node/index.js';

// src/manifest.ts
import { defineManifest } from 'file:///C:/Users/shibao/Documents/UMDev/zz_InfrequentTasks/tools/um-salesforce-vivache/node_modules/@crxjs/vite-plugin/dist/index.mjs';

// package.json
var version = '1.0.0';

// src/manifest.ts
var manifest = defineManifest(async (env) => ({
  manifest_version: 3,
  name: `${env.mode === 'development' ? '[Dev] ' : ''}Um Salesforce Vivace`,
  description: 'Um Salesforce Vivace',
  version,
  background: {
    service_worker: 'background/index.ts',
  },
  content_scripts: [
    {
      matches: ['http://*/*', 'https://*/*', 'file:///*'],
      js: ['content/index.tsx'],
    },
  ],
  host_permissions: [
    'https://*.salesforce.com/*',
    'https://*.force.com/*',
    'https://*.cloudforce.com/*',
    'https://*.visualforce.com/*',
  ],
  options_ui: {
    page: 'options/options.html',
    open_in_tab: true,
  },
  web_accessible_resources: [
    {
      resources: [],
      matches: ['<all_urls>'],
    },
  ],
  action: {
    default_popup: 'popup/popup.html',
    default_icon: {
      16: 'images/extension_16.png',
      32: 'images/extension_32.png',
      48: 'images/extension_48.png',
      128: 'images/extension_128.png',
    },
  },
  icons: {
    16: 'images/extension_16.png',
    32: 'images/extension_32.png',
    48: 'images/extension_48.png',
    128: 'images/extension_128.png',
  },
  permissions: ['storage', 'tabs', 'cookies'],
}));
var manifest_default = manifest;

// vite.config.ts
var __vite_injected_original_dirname =
  'C:\\Users\\shibao\\Documents\\UMDev\\zz_InfrequentTasks\\tools\\um-salesforce-vivache';
var vite_config_default = defineConfig({
  // @see https://github.com/crxjs/chrome-extension-tools/issues/696
  server: {
    port: 5173,
    strictPort: true,
    hmr: {
      port: 5173,
    },
  },
  // prevent src/ prefix on extension urls
  root: resolve(__vite_injected_original_dirname, 'src'),
  publicDir: resolve(__vite_injected_original_dirname, 'public'),
  build: {
    outDir: resolve(__vite_injected_original_dirname, 'dist'),
    rollupOptions: {
      output: {
        chunkFileNames: 'assets/chunk-[hash].js',
      },
    },
  },
  plugins: [react(), crx({ manifest: manifest_default })],
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
